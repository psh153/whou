<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-Mapper.dtd">
<mapper namespace="whou.secproject.mapper.AptitudeMapper">
	
	<!-- 회원가입 시 회원 num으로 테이블 생성 -->
	<insert id="createUserTable">
		create table user${userNum}_test_result(
			index_num number not null primary key,
			test_num number,
			test_answers varchar2(4000),
			test_date date default sysdate,
			test21_1 varchar2(4000),
			test21_2 varchar2(4000),
			test21_3 varchar2(4000),
			test21_4 varchar2(4000),
			test21_5 varchar2(4000),
			test21_6 varchar2(4000),
			test21_7 varchar2(4000),
			test21_8 varchar2(4000),
			test21_9 varchar2(4000),
			test21_10 varchar2(4000),
			test25_1 varchar2(4000),
			test25_2 varchar2(4000),
			test25_3 varchar2(4000),
			test25_4 varchar2(4000),
			test25_5 varchar2(4000),
			test25_6 varchar2(4000),
			test25_7 varchar2(4000),
			test25_8 varchar2(4000),
			test25_9 varchar2(4000),
			test25_10 varchar2(4000),
			test27_1 varchar2(4000),
			test27_2 varchar2(4000),
			test27_3 varchar2(4000),
			test27_4 varchar2(4000),
			test27_5 varchar2(4000),
			test27_6 varchar2(4000),
			test27_7 varchar2(4000),
			test27_8 varchar2(4000),
			test27_9 varchar2(4000),
			test27_10 varchar2(4000),
			test31_1 varchar2(4000),
			test31_2 varchar2(4000),
			test31_3 varchar2(4000),
			test31_4 varchar2(4000),
			test31_5 varchar2(4000),
			test31_6 varchar2(4000),
			test31_7 varchar2(4000),
			test31_8 varchar2(4000),
			test31_9 varchar2(4000),
			test31_10 varchar2(4000)
		)
	</insert>
	
	 <insert id="createSequence">
        CREATE SEQUENCE user${userNum}_test_result_seq
    </insert>
    
    <insert id="createuSaveTable">
		create table user${userNum}_test_temporary_save(
			test_num number not null primary key,
			test_name varchar2(1000),
			test_answers varchar2(4000),
			test_date date default sysdate
		)
    </insert>
	
	<!-- 크롤링한 직업검사 결과를 DB에 insert -->
	<insert id="crawlingInsert">
		insert into user${userNum}_test_result (
			index_num, test_num, test_answers, test_date,
			test21_1, test21_2, test21_3, test21_4, test21_5,test21_6, test21_7, test21_8, test21_9, test21_10,
			test25_1, test25_2, test25_3, test25_4, test25_5,test25_6, test25_7, test25_8, test25_9, test25_10,
			test27_1, test27_2, test27_3, test27_4, test27_5,test27_6, test27_7, test27_8, test27_9, test27_10,
			test31_1, test31_2, test31_3, test31_4, test31_5,test31_6, test31_7, test31_8, test31_9, test31_10
		)
		values (
			user${userNum}_test_result_seq.nextval, #{dto.test_num}, #{dto.test_answers}, sysdate,
			#{dto.test21_1}, #{dto.test21_2}, #{dto.test21_3}, #{dto.test21_4},	#{dto.test21_5},#{dto.test21_6}, #{dto.test21_7}, #{dto.test21_8}, #{dto.test21_9},	#{dto.test21_10},
			#{dto.test25_1}, #{dto.test25_2}, #{dto.test25_3}, #{dto.test25_4},	#{dto.test25_5},#{dto.test25_6}, #{dto.test25_7}, #{dto.test25_8}, #{dto.test25_9},	#{dto.test25_10},
			#{dto.test27_1}, #{dto.test27_2}, #{dto.test27_3}, #{dto.test27_4},	#{dto.test27_5},#{dto.test27_6}, #{dto.test27_7}, #{dto.test27_8}, #{dto.test27_9},	#{dto.test27_10},
			#{dto.test31_1}, #{dto.test31_2}, #{dto.test31_3}, #{dto.test31_4},	#{dto.test31_5},#{dto.test31_6}, #{dto.test31_7}, #{dto.test31_8}, #{dto.test31_9},	#{dto.test31_10}
		)
	</insert>
	
	<!-- 임시저장한 직업검사 결과를 DB에 insert -->
	<insert id="temporarySaveInsert">
		INSERT INTO user${userNum}_test_temporary_save (
			test_num, test_name, test_answers, test_date
		)VALUES(
			#{dtoSv.test_num}, #{dtoSv.test_name}, #{dtoSv.test_answers}, sysdate
		)
	</insert>
	
	<!-- 검사지 메인에 출력할 최근검사일과 검사 횟수 -->
	<select id="getRecentTest" resultType="whou.secproject.component.AptitudeTestValueDTO">
		SELECT test_num, max(test_date) AS max_test_date, count(*) AS count FROM user${userNum}_test_result GROUP BY test_num ORDER BY test_num
	</select>
	
	
	<!-- 모든 임시저장 값 -->
	<select id="getTemporarySave" resultType="whou.secproject.component.AptitudeTestTemporarySaveDTO">
		SELECT * FROM user${userNum}_test_temporary_save
		<where>
			<if test="test_num != null and test_num > 0">
				test_num = #{test_num}
			</if>
		</where>
	</select>
	
	
	
	<!-- 임시저장의 test_num이 같으면 업데이트  -->
	<update id="temporarySaveUpdate">
		UPDATE user${userNum}_test_temporary_save 
			SET test_answers=#{dtoSv.test_answers}, test_date=sysdate 
			WHERE test_num=#{dtoSv.test_num}
	</update>
	
	<!-- 임시저장한 검사를 제출했다면 삭제  -->
	<delete id="temporarySaveDelete">
		DELETE FROM user${userNum}_test_temporary_save WHERE test_num=#{test_num}
	</delete>
	
	<!-- userNum 검색 -->
	<select id="userNumSelect" resultType="int">
		SELECT num FROM whou_user WHERE email = #{memId}
	</select>
	
	<!-- userNum 저장 -->
	<insert id="userNumInsert">
		INSERT INTO recommand_info (num) VALUES (#{userNum})
	</insert>
	
	<!-- userNum Count -->
	<select id="userNumCount" resultType="int">
		SELECT count(*) FROM recommand_info WHERE num = #{userNum}
	</select>
	
	<!-- 가치관 검사지 유형별 직업리스트 seq 검색 -->
	<select id="valuesJob" resultType="String">
		SELECT seq FROM job_unique_num2 WHERE job_nm = #{job_nm}
	</select>
	
	<!-- 가치관 직업번호 저장 -->
	<select id="valuesInsert" >
		insert into values_common (job_cd, value_aim) values (#{result},'성취지향')
	</select>
	
	<select id="jobSelect" resultType="String">
		SELECT seq FROM job_unique_num2 WHERE job_nm = #{jobListItem}
	</select>
	
	<select id="aptdSelect" resultType="String">
		SELECT sort_values FROM aptd_factor WHERE sort_name = #{sortName}
	</select>
	
	<!-- 흥미 직업번호 저장 -->
	<update id="interestUpdate">
		UPDATE recommand_info 
		SET interest_name1=#{dtoRe.interest_name1}, interest_name2=#{dtoRe.interest_name2}, interest_name3=#{dtoRe.interest_name3}, 
			interest_job1=#{dtoRe.interest_job1}, interest_job2=#{dtoRe.interest_job2}, interest_job3=#{dtoRe.interest_job3} 
		WHERE num=#{userNum}
	</update>
	<!-- 적성 직업번호 저장 -->
	<update id="aptitudeUpdate">
		UPDATE recommand_info 
		SET aptitude_name1=#{dtoRe.aptitude_name1}, aptitude_name2=#{dtoRe.aptitude_name2}, aptitude_name3=#{dtoRe.aptitude_name3}, 
			aptitude_job1=#{dtoRe.aptitude_job1}, aptitude_job2=#{dtoRe.aptitude_job2}, aptitude_job3=#{dtoRe.aptitude_job3} 
		WHERE num=#{userNum}
	</update>
	<!-- 가치관 차트점수 저장 -->
	<update id="valuesUpdate">
		UPDATE recommand_info SET values_score=#{score} WHERE num=#{userNum}
	</update>
	<!-- 적성 차트점수 저장 -->
	<update id="aptitudeScoreUpdate">
		UPDATE recommand_info SET aptitude_score=#{dtoRe.aptitude_score} WHERE num=#{userNum}
	</update>
	<!-- 적성 차트이름 저장 -->
	<update id="saveAptitudeScoreName">
		UPDATE recommand_info SET abc3=#{dto.test21_7} WHERE num=#{userNum}
	</update>
	
	<!-- 흥미 차트점수 저장 -->
	<update id="interestScoreUpdate">
		UPDATE recommand_info SET interest_score=#{dtoRe.interest_score} WHERE num=#{userNum}
	</update>
	<!-- 역량 차트점수 저장 -->
	<update id="saveAbilityScore">
		UPDATE recommand_info SET abc4=#{abilityScore} WHERE num=#{userNum}
	</update>
	
	<!-- 세션으로 이름 꺼내기 -->
	<select id="getName" resultType="String">
		SELECT name FROM whou_user WHERE email = #{memId}
	</select>
	
	
	
	<!-- 마이페이지 차트 점수 -->
	<select id="getAptitudeScore" resultType="String">
		SELECT aptitude_score FROM recommand_info WHERE num = #{userNum}
	</select>
	<!-- 적성 차트 이름 -->
	<select id="getAptitudeScoreName" resultType="String">
		SELECT abc3 FROM recommand_info WHERE num = #{userNum}
	</select>
	<select id="getInterestScore" resultType="String">
		SELECT interest_score FROM recommand_info WHERE num = #{userNum}
	</select>
	<select id="getValuesScore" resultType="String">
		SELECT values_score FROM recommand_info WHERE num = #{userNum}
	</select>
	<select id="getAbilityScore" resultType="String">
		SELECT abc4 FROM recommand_info WHERE num = #{userNum}
	</select>
	
	
	<!-- 검사하면 회원 테이블에 1 업데이트 -->
	<update id="commendNumUpdate">
		UPDATE user_info SET update_true='1' WHERE email=#{memId}
	</update>

	<!-- 진척률 관련 -->	
	<update id="updatePercent">
		UPDATE user_info SET TEST_PERCENT=#{percents} WHERE num=#{userNum}
	</update>
	
	<select id="getPercent" resultType="String">
	 	select test_percent from user_info where num = #{userNum}
	</select>
</mapper>